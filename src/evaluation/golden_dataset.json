[
  {
    "id": "example_001",
    "question": "What is the main purpose of the RAG system?",
    "ideal_answer": "The RAG (Retrieval-Augmented Generation) system is designed to enhance language model responses by retrieving relevant information from a knowledge base before generating answers. This allows the system to provide more accurate, up-to-date, and contextually relevant responses by combining the generative capabilities of large language models with the ability to access and reference specific documents or data sources.",
    "category": "system_overview",
    "difficulty": "medium",
    "expected_context_sources": [
      "RAG system documentation",
      "Architecture overview documents"
    ],
    "keywords": ["RAG", "retrieval", "augmented", "generation", "system", "purpose"],
    "metadata": {
      "domain": "technical",
      "language": "en",
      "created_date": "2024-01-15",
      "reviewed_by": "evaluator_001"
    }
  },
  {
    "id": "example_002", 
    "question": "How does the embedding service work in this RAG implementation?",
    "ideal_answer": "The embedding service converts text documents and queries into high-dimensional vector representations using embedding models. These vectors capture semantic meaning and enable similarity-based retrieval. When a query is processed, it's converted to an embedding vector, which is then used to search the vector database for the most similar document chunks based on cosine similarity or other distance metrics.",
    "category": "technical_implementation",
    "difficulty": "high",
    "expected_context_sources": [
      "Embedding service documentation",
      "Vector store implementation details",
      "Similarity search algorithms"
    ],
    "keywords": ["embedding", "vector", "similarity", "retrieval", "semantic"],
    "metadata": {
      "domain": "technical",
      "language": "en", 
      "created_date": "2024-01-15",
      "reviewed_by": "evaluator_001"
    }
  },
  {
    "id": "example_003",
    "question": "What are the main components of the document processing pipeline?",
    "ideal_answer": "The document processing pipeline typically includes: 1) Document ingestion and parsing (handling various formats like PDF, DOCX, TXT), 2) Text extraction and cleaning, 3) Text chunking and segmentation for optimal retrieval, 4) Embedding generation for each chunk, 5) Vector storage in a database like ChromaDB, and 6) Indexing for efficient similarity search. The pipeline ensures documents are properly processed and made searchable for the RAG system.",
    "category": "system_architecture",
    "difficulty": "medium",
    "expected_context_sources": [
      "Document processor documentation",
      "Pipeline architecture diagrams",
      "Processing workflow documentation"
    ],
    "keywords": ["pipeline", "processing", "chunking", "embedding", "storage", "indexing"],
    "metadata": {
      "domain": "technical",
      "language": "en",
      "created_date": "2024-01-15", 
      "reviewed_by": "evaluator_001"
    }
  }
]
